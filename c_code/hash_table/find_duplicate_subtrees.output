#define LIST_SIZE       401
#define DELTA           200
#define STRING_SIZE     40000
#define NODE_SIZE       10000
#define INIT_NUM        -1


typedef struct {
    char* val;
    int len;
    bool checked;
    struct TreeNode* tree_ptr;
    struct MyLinkedList* next;
} MyLinkedList;

/** Initialize your data structure here. */

MyLinkedList* myLinkedListCreate(int size) 
{
    //printf("%s:%d\n", __func__, size);
    MyLinkedList* new = NULL;
    new = (MyLinkedList*)malloc(sizeof(MyLinkedList));
    new->val  = calloc(size, sizeof(char));
    new->val[0] = INIT_NUM;
    new->tree_ptr = NULL;
    new->next = NULL;
    new->checked = false;
    return new;
}

int printTreeToString(struct TreeNode* root, char* stree)
{
    int count = 0;

    sprintf(stree, "%04d", root->val);
    count = 4;
    if(root->left)
        count += printTreeToString(root->left, stree  + count);
    else
    {
        sprintf(stree + 4, "%c", 'n');
        count++;
    }
    if(root->right)
        printTreeToString(root->left, stree + count);
    else
    {
        sprintf(stree + 4, "%c", 'n');
        count++;
    }
    printf("[%d]-%s\n", count, stree);

    return count;
}

/** Append a node of value val to the last element of the linked list. */
void myLinkedListAddAtTail(MyLinkedList* obj, struct TreeNode* root) 
{
    //printf("%s:0x%x\n", __func__, obj);
    MyLinkedList* end = NULL;
    MyLinkedList* ptr = NULL;
    
    if(obj && obj->val[0] != INIT_NUM)
    {
        end = myLinkedListCreate(STRING_SIZE);
        end->len = printTreeToString(root, end->val); 
        end->tree_ptr = root;
        ptr = obj;
        while(ptr->next)
        {
            ptr = (MyLinkedList*)ptr->next;
        }
        ptr->next = end;
    }
    else
    {
        //printf("copy... %d:%d\n", strlen(obj->val), strlen(val));
        obj->len = printTreeToString(root, obj->val); 
        obj->tree_ptr = root;
    }
}


/** check if list contains tree root
 *  return true if contains
 *  return false if not contains
 *  return_node would be NULL, if not contains or contains but has been checked.
 *  return_node would be real pointer of duplicated tree node, if contains. **/
bool myLinkedListContain(MyLinkedList* obj, struct TreeNode* root, struct TreeNode* return_node)
{
    MyLinkedList* ptr = obj;
    int len;
    char *temp = malloc(STRING_SIZE * sizeof(char));
    
    return_node = NULL;
    len = printTreeToString(root, temp);
    printf("target:[%d]-%s\n", len, temp);
    printf("source:[%d]-%s\n", ptr->len, ptr->val);
    if(len == ptr->len && !strcmp(ptr->val, temp))
    {
        if(!ptr->checked)
            return_node = ptr->tree_ptr;
        ptr->checked = true;
        return true;
    }
    while(ptr->next)
    {
        ptr = (MyLinkedList*)ptr->next;
        if(len == ptr->len && !strcmp(ptr->val, temp))
	    {
	        if(!ptr->checked)
	            return_node = ptr->tree_ptr;
            ptr->checked = true;
	        return true;
	    }
    }
    return false;
}

void myLinkedListFree(MyLinkedList* obj) {
    MyLinkedList* ptr = NULL;

    while(obj)
    {
        ptr = (MyLinkedList*)obj->next;
        if(obj->val) free(obj->val);
        free(obj);
        obj = ptr;
    }
}

typedef struct 
{
    MyLinkedList** arr;
} TreeHashSet;

TreeHashSet* treeHashSetCreate() 
{
    //printf("%s\n", __FUNCTION__);
    TreeHashSet* obj = malloc(sizeof(TreeHashSet));
    int j; 

    obj->arr = malloc(sizeof(MyLinkedList*) * LIST_SIZE);
    for(j = 0; j < LIST_SIZE; j++)    
    {
        obj->arr[j] = myLinkedListCreate(STRING_SIZE);
    }
    return obj;
}

//static MyLinkedList* list_key;
//static list_key_count;

void treeHashSetAdd(TreeHashSet* obj, struct TreeNode* root) 
{
    //printf("%s####%s####0x%x:%d\n", __func__, key, key, strlen(key));
    myLinkedListAddAtTail(obj->arr[root->val + DELTA], root);
}

bool treeHashSetContain(TreeHashSet* obj, struct TreeNode* root, struct TreeNode* return_node)
{
    return myLinkedListContain(obj->arr[root->val + DELTA], root, return_node); 
}

void treeHashSetFree(TreeHashSet* obj) 
{
    //printf("%s\n", __func__);
    int i;

    for(i = 0; i < LIST_SIZE; i++)
	    if(obj->arr[i]) myLinkedListFree(obj->arr[i]);

	if(obj->arr) free(obj->arr);
    if(obj) free(obj);
} 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

static struct TreeNode** new;    

int searchTree(TreeHashSet* obj, struct TreeNode* root, int* count)
{
    /* process root node */
    if(treeHashSetContain(obj, root, new[*count]))
    {
        if(new[*count]) (*count)++; /* find one duplicated subtree, and store in new[count] */
    }
    else
    {
        treeHashSetAdd(obj, root);
    }

    /* process left sub tree */
    if(root->left) *count += searchTree(obj, root->left, count);
    /* process right sub tree */
    if(root->right) *count += searchTree(obj, root->right, count);

    return *count;
}


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
struct TreeNode** findDuplicateSubtrees(struct TreeNode* root, int* returnSize)
{
    TreeHashSet* hash_tree = NULL;
    int i = 0;

    hash_tree = treeHashSetCreate();
    new = malloc(NODE_SIZE * sizeof(struct TreeNode*));
    for(i = 0; i < NODE_SIZE; i++)
        new[i] = NULL;

    *returnSize = 0;

    *returnSize += searchTree(hash_tree, root, returnSize);

    treeHashSetFree(hash_tree);

    return new;
    
}



/* 114-1288(n/a)-321.8 , on Jun 19, 2021 */
